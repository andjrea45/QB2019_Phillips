return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=i,sitenum2=j))
?outer
beta.jb(site.by.species = jellybeanA,sitenum1 = 1, sitenum2=2, pairwise=TRUE)
beta.jb(site.by.species = jellybeanA,sitenum1 = 1, sitenum2=2)
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=i,sitenum2=j, pairwise = TRUE))
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=x,sitenum2=y, pairwise = TRUE))
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=i,sitenum2=i, pairwise = TRUE))
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=i,sitenum2=j, pairwise = TRUE))
jellybean[1,5]
jellybeanA[1,1]
as.matrix(jellybeanA)
as.matrix(jellybeanA[1,])
as.matrix(jellybeanA[2,])
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=i,sitenum2=j, pairwise = TRUE))
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybeanA, sitenum1 = 1, sitenum2 = 2, pairwise = TRUE)
outer(1:length(jellybeanA),1:length(jellybeanA),FUN = beta.jb(site.by.species = jellybeanA,sitenum1=X,sitenum2=Y, pairwise = TRUE))
?t.test
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybean, sitenum1 = jellybeanA, sitenum2 = jellybeanB, pairwise = TRUE)
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybean, sitenum1 = jellybeanA, sitenum2 = jellybeanB, pairwise = TRUE)
?as.vector
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
jellybeanAsum <- as.vector(jellybeanA, mode = "any")
jellybeanBsum <- as.vector(jellybeanB, mode = "any")
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybean, sitenum1 = jellybeanA, sitenum2 = jellybeanB, pairwise = TRUE)
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
jellybeanAsum <- as.vector(jellybeanA, mode = "any")
jellybeanBsum <- as.vector(jellybeanB, mode = "any")
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
beta.jb(site.by.species = jellybean, sitenum1 = jellybeanAsum, sitenum2 = jellybeanBsum, pairwise = TRUE)
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
#I don't know how to compare all the subsamples pairwise without writing a million lines of code.
#We haven't gone over doing t-tests in R, and there's no explanation of what the vicariance event is anywhere...
jelly.db <- vegdist(jellybean, method = "bray", upper = TRUE, diag = TRUE)
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybean = jellybean[1:9, 3:30]
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybean = jellybean[1:9, 3:30]
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
#jellybeanA <-jellybean[jellybeanA, 3:30]
#jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
#I don't know how to compare all the subsamples pairwise without writing a million lines of code.
#We haven't gone over doing t-tests in R, and there's no explanation of what the vicariance event is anywhere...
jelly.db <- vegdist(jellybean, method = "bray", upper = TRUE, diag = TRUE)
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybean = jellybean[1:9, 3:30]
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
#jellybeanA <-jellybean[jellybeanA, 3:30]
#jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
#I don't know how to compare all the subsamples pairwise without writing a million lines of code.
#We haven't gone over doing t-tests in R, and there's no explanation of what the vicariance event is anywhere...
jelly.db <- vegdist(jellybean, method = "bray", upper = TRUE, diag = TRUE)
jelly.ward <- hclust(jelly.db, method = "ward.D2")
par(mar = c(1, 5, 2, 2) + 0.1)
plot(jelly.ward, main = "Jellybeans: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
#I don't know how to compare all the subsamples pairwise without writing a million lines of code.
#We haven't gone over doing t-tests in R, and there's no explanation of what the vicariance event is anywhere...
jellybean = jellybean[1:9, 3:30]
jelly.db <- vegdist(jellybeanA, method = "bray", upper = TRUE, diag = TRUE)
jelly.ward <- hclust(jelly.db, method = "ward.D2")
par(mar = c(1, 5, 2, 2) + 0.1)
plot(jelly.ward, main = "Jellybeans: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
getwd()
jellybean <- read.table("JellyBeans.txt", sep = "\t", header = TRUE)
jellybeansource <- read.table("JellyBeans.Source.txt", sep="\t", header = TRUE)
jellybeanA <- c(1, 2, 3, 6, 8)
jellybeanB <- c(4, 5, 7, 8, 9)
jellybeanA <-jellybean[jellybeanA, 3:30]
jellybeanB <-jellybean[jellybeanB,3:30]
beta.jb <- function(site.by.species = "", sitenum1 = "", sitenum2 = "", pairwise = FALSE)
if (pairwise == TRUE){
if (sitenum1 == "" | sitenum2 == "") {
print("Error: please specify sites to compare")
return =(NA)}
site1 = site.by.species[sitenum1,]
site2 = site.by.species[sitenum2,]
site1 = subset(site1, select = site1 > 0)
site2 = subset(site2, select = site2 > 0)
gamma = union(colnames(site1), colnames(site2))
s = length(gamma)
a.bar = mean(c(specnumber(site1), specnumber(site2)))
b.jb = round(s/a.bar - 1, 3)
return(b.jb)
}
#I don't know how to compare all the subsamples pairwise without writing a million lines of code.
#We haven't gone over doing t-tests in R, and there's no explanation of what the vicariance event is anywhere...
jellybean = jellybean[1:9, 3:30]
jelly.db <- vegdist(jellybeanA, method = "bray", upper = TRUE, diag = TRUE)
jelly.ward <- hclust(jelly.db, method = "ward.D2")
par(mar = c(1, 5, 2, 2) + 0.1)
plot(jelly.ward, main = "Jellybeans A: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
jelly.db <- vegdist(jellybeanB, method = "bray", upper = TRUE, diag = TRUE)
jelly.ward <- hclust(jelly.db, method = "ward.D2")
par(mar = c(1, 5, 2, 2) + 0.1)
plot(jelly.ward, main = "Jellybeans B: Ward's Clustering",
ylab = "Squared Bray-Curtis Distance")
#Clear workspace, set working directory and load packages
rm(list=ls())
getwd()
require("tidyverse")
require("vegan")
require("ggplot2")
require("OTUtable")
#Clear workspace, set working directory and load packages
rm(list=ls())
getwd()
install.packages("tidyverse")
install.packages("vegan")
install.packages("ggplot2")
install.packages("OTUtable")
require("tidyverse")
require("vegan")
require("ggplot2")
require("OTUtable")
install.packages("vegan")
#Load bog data and print structure
bog_loc <- read.table("NTL_MO_bogs_location.txt", header = TRUE, sep = "\t", row.names = 1)
data(otu_table)
str(otu_table, max.level=0)
#Load bog data and print structure
bog_loc <- read.table("NTL_MO_bogs_location.txt", header = TRUE, sep = "\t", row.names = 1)
data(otu_table)
str(otu_table, max.level=0)
#Clear workspace, set working directory and load packages
rm(list=ls())
getwd()
install.packages("tidyverse")
install.packages("vegan")
install.packages("ggplot2")
install.packages("OTUtable")
require("tidyverse")
require("vegan")
require("ggplot2")
require("OTUtable")
#Load bog data and print structure
bog_loc <- read.table("NTL_MO_bogs_location.txt", header = TRUE, sep = "\t", row.names = 1)
data(otu_table)
str(otu_table, max.level=0)
first <- c("E01JUL07", "E02JUL07", "E03JUL07", "E04JUL07")
otu_JUL07 <- otu_table[,grep(paste(first, collapse = "|"), colnames(otu_table))]
CB <- c("CB", "JUL")
otu_CB <- otu_table[,grep(CB, colnames(otu_table))]
print(colnames(otu_JUL07))
print(colnames(otu_CB))
otu_JUL07 <- as.data.frame(t(otu_JUL07))
head(otu_table)
#spatial diversity
require("vegan")
install.packages("sp")
require("sp")
install.packages("gstat")
require("gstat")
install.packages("raster")
require("raster")
install.packages("RgoogleMaps")
require("RGoogleMaps")
install.packages("maptools")
require("maptools")
install.packages("rgdal")
require("rgdal")
install.packages("simba")
require("simba")
install.packages("gplots")
require("gplots")
install.packages("rgeos")
require(rgeos)
boglocate <- read.table("NTL_MO_bogs_location.txt", head = TRUE, sep = ",")
bogsbs <- read.table("otu_table", head = TRUE, sep = ",")
boglocate <- read.table("NTL_MO_bogs_location.txt", head = TRUE, sep = ",")
bogsbs <- otu_table
bogsbsnames <- names(bogsbs)
bogsbs <- as.data.frame(bogsbs[-1])
#Clear workspace, set working directory and load packages
rm(list=ls())
getwd()
install.packages("tidyverse")
install.packages("vegan")
install.packages("ggplot2")
install.packages("OTUtable")
require("tidyverse")
require("vegan")
require("ggplot2")
require("OTUtable")
#Load bog data and print structure
bog_loc <- read.table("NTL_MO_bogs_location.txt", header = TRUE, sep = "\t", row.names = 1)
data(otu_table)
str(otu_table, max.level=0)
first <- c("E01JUL07", "E02JUL07", "E03JUL07", "E04JUL07")
otu_JUL07 <- otu_table[,grep(paste(first, collapse = "|"), colnames(otu_table))]
CB <- c("CB", "JUL")
otu_CB <- otu_table[,grep(CB, colnames(otu_table))]
print(colnames(otu_JUL07))
print(colnames(otu_CB))
otu_JUL07 <- as.data.frame(t(otu_JUL07))
min.N <- min(rowSums(otu_table))
jelly.rarefy <- rarefy(x = otu_table, sample = min.N, se = TRUE)
rarecurve(x = otu_table, step = 10, col = "blue", cex = 0.6, las = 1, main = "Bog rarefaction curve")
abline(0,1, col = 'red')
abline(v = min.N, col = 'green')
#generating a heat map between two distant bogs
order <- rev(attr())
